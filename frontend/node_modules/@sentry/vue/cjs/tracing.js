var {
  _optionalChain
} = require('@sentry/utils/cjs/buildPolyfills');

Object.defineProperty(exports, '__esModule', { value: true });

var browser = require('@sentry/browser');
var utils = require('@sentry/utils');
var components = require('./components.js');
var constants = require('./constants.js');

var VUE_OP = 'ui.vue';

// Mappings from operation to corresponding lifecycle hook.
var HOOKS = {
  activate: ['activated', 'deactivated'],
  create: ['beforeCreate', 'created'],
  destroy: ['beforeDestroy', 'destroyed'],
  mount: ['beforeMount', 'mounted'],
  update: ['beforeUpdate', 'updated'],
};

/** Grabs active transaction off scope, if any */
function getActiveTransaction() {
  return _optionalChain([browser.getCurrentHub, 'call', _ => _(), 'access', _2 => _2.getScope, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getTransaction, 'call', _5 => _5()]);
}

/** Finish top-level span and activity with a debounce configured using `timeout` option */
function finishRootSpan(vm, timestamp, timeout) {
  if (vm.$_sentryRootSpanTimer) {
    clearTimeout(vm.$_sentryRootSpanTimer);
  }

  vm.$_sentryRootSpanTimer = setTimeout(() => {
    if (_optionalChain([vm, 'access', _6 => _6.$root, 'optionalAccess', _7 => _7.$_sentryRootSpan])) {
      vm.$root.$_sentryRootSpan.finish(timestamp);
      vm.$root.$_sentryRootSpan = undefined;
    }
  }, timeout);
}

var createTracingMixins = (options) => {
  var hooks = (options.hooks || [])
    .concat(constants.DEFAULT_HOOKS)
    // Removing potential duplicates
    .filter((value, index, self) => self.indexOf(value) === index);

  var mixins = {};

  for (var operation of hooks) {
    // Retrieve corresponding hooks from Vue lifecycle.
    // eg. mount => ['beforeMount', 'mounted']
    var internalHooks = HOOKS[operation];
    if (!internalHooks) {
      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(`Unknown hook: ${operation}`);
      continue;
    }

    for (var internalHook of internalHooks) {
      mixins[internalHook] = function () {
        var isRoot = this.$root === this;

        if (isRoot) {
          var activeTransaction = getActiveTransaction();
          if (activeTransaction) {
            this.$_sentryRootSpan =
              this.$_sentryRootSpan ||
              activeTransaction.startChild({
                description: 'Application Render',
                op: VUE_OP,
              });
          }
        }

        // Skip components that we don't want to track to minimize the noise and give a more granular control to the user
        var name = components.formatComponentName(this, false);
        var shouldTrack = Array.isArray(options.trackComponents)
          ? options.trackComponents.indexOf(name) > -1
          : options.trackComponents;

        // We always want to track root component
        if (!isRoot && !shouldTrack) {
          return;
        }

        this.$_sentrySpans = this.$_sentrySpans || {};

        // Start a new span if current hook is a 'before' hook.
        // Otherwise, retrieve the current span and finish it.
        if (internalHook == internalHooks[0]) {
          var activeTransaction = _optionalChain([this, 'access', _8 => _8.$root, 'optionalAccess', _9 => _9.$_sentryRootSpan]) || getActiveTransaction();
          if (activeTransaction) {
            this.$_sentrySpans[operation] = activeTransaction.startChild({
              description: `Vue <${name}>`,
              op: `${VUE_OP}.${operation}`,
            });
          }
        } else {
          // The span should already be added via the first handler call (in the 'before' hook)
          var span = this.$_sentrySpans[operation];
          // The before hook did not start the tracking span, so the span was not added.
          // This is probably because it happened before there is an active transaction
          if (!span) return;

          span.finish();
          finishRootSpan(this, utils.timestampInSeconds(), options.timeout);
        }
      };
    }
  }

  return mixins;
};

exports.createTracingMixins = createTracingMixins;
//# sourceMappingURL=tracing.js.map
