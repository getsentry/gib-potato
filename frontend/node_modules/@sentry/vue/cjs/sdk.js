Object.defineProperty(exports, '__esModule', { value: true });

var browser = require('@sentry/browser');
var utils = require('@sentry/utils');
var constants = require('./constants.js');
var errorhandler = require('./errorhandler.js');
var tracing = require('./tracing.js');

var DEFAULT_CONFIG = {
  Vue: utils.getGlobalObject().Vue,
  attachProps: true,
  logErrors: false,
  hooks: constants.DEFAULT_HOOKS,
  timeout: 2000,
  trackComponents: false,
  _metadata: {
    sdk: {
      name: 'sentry.javascript.vue',
      packages: [
        {
          name: 'npm:@sentry/vue',
          version: browser.SDK_VERSION,
        },
      ],
      version: browser.SDK_VERSION,
    },
  },
};

/**
 * Inits the Vue SDK
 */
function init(
  config = {},
) {
  var options = {
    ...DEFAULT_CONFIG,
    ...config,
  };

  browser.init(options);

  if (!options.Vue && !options.app) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&
      utils.logger.warn(
        'Misconfigured SDK. Vue specific errors will not be captured.\n' +
          'Update your `Sentry.init` call with an appropriate config option:\n' +
          '`app` (Application Instance - Vue 3) or `Vue` (Vue Constructor - Vue 2).',
      );
    return;
  }

  if (options.app) {
    var apps = Array.isArray(options.app) ? options.app : [options.app];
    apps.forEach(app => vueInit(app, options));
  } else if (options.Vue) {
    vueInit(options.Vue, options);
  }
}

var vueInit = (app, options) => {
  errorhandler.attachErrorHandler(app, options);

  if ('tracesSampleRate' in options || 'tracesSampler' in options) {
    app.mixin(
      tracing.createTracingMixins({
        ...options,
        ...options.tracingOptions,
      }),
    );
  }
};

exports.init = init;
//# sourceMappingURL=sdk.js.map
