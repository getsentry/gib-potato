{"version":3,"file":"apollo.js","sources":["../../../../../src/integrations/node/apollo.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\ntype ApolloResolverGroup = {\n  [key: string]: () => unknown;\n};\n\ntype ApolloModelResolvers = {\n  [key: string]: ApolloResolverGroup;\n};\n\n/** Tracing integration for Apollo */\nexport class Apollo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Apollo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Apollo.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const pkg = loadModule<{\n      ApolloServerBase: {\n        prototype: {\n          constructSchema: () => unknown;\n        };\n      };\n    }>('apollo-server-core');\n\n    if (!pkg) {\n      logger.error('Apollo Integration was unable to require apollo-server-core package.');\n      return;\n    }\n\n    /**\n     * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n     */\n    fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig: () => unknown) {\n      return function (this: { config: { resolvers: ApolloModelResolvers[] } }) {\n        const resolvers = Array.isArray(this.config.resolvers) ? this.config.resolvers : [this.config.resolvers];\n\n        this.config.resolvers = resolvers.map(model => {\n          Object.keys(model).forEach(resolverGroupName => {\n            Object.keys(model[resolverGroupName]).forEach(resolverName => {\n              if (typeof model[resolverGroupName][resolverName] !== 'function') {\n                return;\n              }\n\n              wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n            });\n          });\n\n          return model;\n        });\n\n        return orig.call(this);\n      };\n    });\n  }\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(\n  model: ApolloModelResolvers,\n  resolverGroupName: string,\n  resolverName: string,\n  getCurrentHub: () => Hub,\n): void {\n  fill(model[resolverGroupName], resolverName, function (orig: () => unknown | Promise<unknown>) {\n    return function (this: unknown, ...args: unknown[]) {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = scope?.getSpan();\n      const span = parentSpan?.startChild({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'db.graphql.apollo',\n      });\n\n      const rv = orig.call(this, ...args);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.finish();\n          return res;\n        });\n      }\n\n      span?.finish();\n\n      return rv;\n    };\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAYA;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAEA;;;AAGA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;"}