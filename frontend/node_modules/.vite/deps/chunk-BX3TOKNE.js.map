{
  "version": 3,
  "sources": ["../../@sentry/src/url.ts", "../../@sentry/src/tracing.ts", "../../@sentry/src/env.ts", "../../@sentry/src/node.ts", "../../@sentry/src/global.ts", "../../@sentry/src/is.ts", "../../@sentry/src/browser.ts", "../../@sentry/src/error.ts", "../../@sentry/src/dsn.ts", "../../@sentry/src/logger.ts", "../../@sentry/src/string.ts", "../../@sentry/src/object.ts", "../../@sentry/src/buildPolyfills/_nullishCoalesce.ts", "../../@sentry/src/buildPolyfills/_optionalChain.ts", "../../@sentry/src/stacktrace.ts", "../../@sentry/src/supports.ts", "../../@sentry/src/instrument.ts", "../../@sentry/src/memo.ts", "../../@sentry/src/misc.ts", "../../@sentry/src/normalize.ts", "../../@sentry/src/syncpromise.ts", "../../@sentry/src/promisebuffer.ts", "../../@sentry/src/requestdata.ts", "../../@sentry/src/severity.ts", "../../@sentry/src/time.ts", "../../@sentry/src/envelope.ts", "../../@sentry/src/clientreport.ts", "../../@sentry/src/ratelimit.ts", "../../@sentry/src/baggage.ts", "../../@sentry/src/session.ts", "../../@sentry/src/scope.ts", "../../@sentry/src/hub.ts", "../../@sentry/src/exports.ts"],
  "sourcesContent": ["/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n", "import { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n", "/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These fags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n", "/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n", "/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `getGlobalObject`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof SentryGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const global = (obj || getGlobalObject()) as SentryGlobal;\n  const __SENTRY__ = (global.__SENTRY__ = global.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat: unknown, ty: string): boolean {\n  return objectToString.call(wat) === `[object ${ty}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n", "import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n", "import type { ConsoleLevel } from './logger';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n", "import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents\n */\nexport function dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!__DEBUG_BUILD__) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}\n", "import { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject, getGlobalSingleton } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = typeof CONSOLE_LEVELS[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            global.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n", "import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n", "/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V extends unknown>(\n  value: V,\n):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n", "/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nexport function _nullishCoalesce(lhs: unknown, rhsFn: () => unknown): unknown {\n  // by checking for loose equality to `null`, we catch both `null` and `undefined`\n  return lhs != null ? lhs : rhsFn();\n}\n\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n", "import { GenericFunction } from './types';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nexport function _optionalChain(ops: unknown[]): unknown {\n  let lastAccessLHS: unknown = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i] as string;\n    const fn = ops[i + 1] as (intermediateValue: unknown) => unknown;\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args: unknown[]) => (value as GenericFunction).call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n", "import { StackFrame, StackLineParser, StackLineParserFn, StackParser } from '@sentry/types';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n\n    for (const line of stack.split('\\n').slice(skipFirst)) {\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = line.replace(/\\(error: (.*)\\)/, '$1');\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: StackFrame[]): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].function || '';\n  const lastFrameFunction = localStack[localStack.length - 1].function || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(frame => ({\n      ...frame,\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?',\n    }))\n    .reverse();\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\ntype GetModuleFn = (filename: string | undefined) => string | undefined;\n\n// eslint-disable-next-line complexity\nfunction node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    const lineMatch = line.match(FULL_MATCH);\n    if (!lineMatch) {\n      return undefined;\n    }\n\n    let object: string | undefined;\n    let method: string | undefined;\n    let functionName: string | undefined;\n    let typeName: string | undefined;\n    let methodName: string | undefined;\n\n    if (lineMatch[1]) {\n      functionName = lineMatch[1];\n\n      let methodStart = functionName.lastIndexOf('.');\n      if (functionName[methodStart - 1] === '.') {\n        // eslint-disable-next-line no-plusplus\n        methodStart--;\n      }\n\n      if (methodStart > 0) {\n        object = functionName.substr(0, methodStart);\n        method = functionName.substr(methodStart + 1);\n        const objectEnd = object.indexOf('.Module');\n        if (objectEnd > 0) {\n          functionName = functionName.substr(objectEnd + 1);\n          object = object.substr(0, objectEnd);\n        }\n      }\n      typeName = undefined;\n    }\n\n    if (method) {\n      typeName = object;\n      methodName = method;\n    }\n\n    if (method === '<anonymous>') {\n      methodName = undefined;\n      functionName = undefined;\n    }\n\n    if (functionName === undefined) {\n      methodName = methodName || '<anonymous>';\n      functionName = typeName ? `${typeName}.${methodName}` : methodName;\n    }\n\n    const filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].substr(7) : lineMatch[2];\n    const isNative = lineMatch[5] === 'native';\n    const isInternal =\n      isNative || (filename && !filename.startsWith('/') && !filename.startsWith('.') && filename.indexOf(':\\\\') !== 1);\n\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    const in_app = !isInternal && filename !== undefined && !filename.includes('node_modules/');\n\n    return {\n      filename,\n      module: getModule?.(filename),\n      function: functionName,\n      lineno: parseInt(lineMatch[3], 10) || undefined,\n      colno: parseInt(lineMatch[4], 10) || undefined,\n      in_app,\n    };\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n", "import { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      __DEBUG_BUILD__ &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n", "/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { isInstanceOf, isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      __DEBUG_BUILD__ && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      const xhrInfo: SentryWrappedXMLHttpRequest['__sentry_xhr__'] = (xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function (): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount -= 1;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/** Many browser now support native uuid v4 generation */\ninterface CryptoWithRandomUUID extends Crypto {\n  randomUUID?(): string;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = (global.crypto || global.msCrypto) as CryptoWithRandomUUID;\n\n  if (crypto && crypto.randomUUID) {\n    return crypto.randomUUID().replace(/-/g, '');\n  }\n\n  const getRandomByte =\n    crypto && crypto.getRandomValues ? () => crypto.getRandomValues(new Uint8Array(1))[0] : () => Math.random() * 16;\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n", "import { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (value === null || (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We're also done if we've reached the max depth\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, depth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n\n    numAdded += 1;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n    if (value === void 0) {\n      return '[undefined]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    return `[object ${(Object.getPrototypeOf(value) as Prototype).constructor.name}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n", "/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: \u00AF\\_(\u30C4)_/\u00AF\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n", "import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          // eslint-disable-next-line no-plusplus\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n", "/* eslint-disable complexity */\n/**\n * The functions here, which enrich an event with request data, are mostly for use in Node, but are safe for use in a\n * browser context. They live here in `@sentry/utils` rather than in `@sentry/node` so that they can be used in\n * frameworks (like nextjs), which, because of SSR, run the same code in both Node and browser contexts.\n *\n * TODO (v8 / #5257): Remove the note below\n * Note that for now, the tests for this code have to live in `@sentry/node`, since they test both these functions and\n * the backwards-compatibility-preserving wrappers which still live in `handlers.ts` there.\n */\n\n/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Event, ExtractedNodeRequestData, Transaction, TransactionSource } from '@sentry/types';\n\nimport { isPlainObject, isString } from './is';\nimport { normalize } from './normalize';\nimport { stripUrlQueryAndFragment } from './url';\n\nconst DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  transaction: true,\n  user: true,\n};\nconst DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nconst DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\ntype BaseRequest = {\n  method?: string;\n  url?: string;\n};\n\ntype BrowserRequest = BaseRequest;\n\ntype NodeRequest = BaseRequest & {\n  headers?: {\n    [key: string]: string | string[] | undefined;\n  };\n  protocol?: string;\n  socket?: {\n    encrypted?: boolean;\n    remoteAddress?: string;\n  };\n};\n\ntype KoaRequest = NodeRequest & {\n  host?: string;\n  hostname?: string;\n  ip?: string;\n  originalUrl?: string;\n};\n\ntype NextjsRequest = NodeRequest & {\n  cookies?: {\n    [key: string]: string;\n  };\n  query?: {\n    [key: string]: any;\n  };\n};\n\ntype ExpressRequest = NodeRequest & {\n  baseUrl?: string;\n  body?: string | { [key: string]: any };\n  host?: string;\n  hostname?: string;\n  ip?: string;\n  originalUrl?: string;\n  route?: {\n    path: string;\n    stack: [\n      {\n        name: string;\n      },\n    ];\n  };\n  query?: {\n    [key: string]: any;\n  };\n  user?: {\n    [key: string]: any;\n  };\n};\n\n/** A `Request` type compatible with Node, Express, browser, etc., because everything is optional */\nexport type CrossPlatformRequest = BaseRequest &\n  BrowserRequest &\n  NodeRequest &\n  ExpressRequest &\n  KoaRequest &\n  NextjsRequest;\n\ntype InjectedNodeDeps = {\n  cookie: {\n    parse: (cookieStr: string) => Record<string, string>;\n  };\n  url: {\n    parse: (urlStr: string) => {\n      query: string | null;\n    };\n  };\n};\n\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nexport function addRequestDataToTransaction(\n  transaction: Transaction | undefined,\n  req: CrossPlatformRequest,\n  deps?: InjectedNodeDeps,\n): void {\n  if (!transaction) return;\n  if (!transaction.metadata.source || transaction.metadata.source === 'url') {\n    // Attempt to grab a parameterized route off of the request\n    transaction.setName(...extractPathForTransaction(req, { path: true, method: true }));\n  }\n  transaction.setData('url', req.originalUrl || req.url);\n  if (req.baseUrl) {\n    transaction.setData('baseUrl', req.baseUrl);\n  }\n  transaction.setData('query', extractQueryParams(req, deps));\n}\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */\nexport function extractPathForTransaction(\n  req: CrossPlatformRequest,\n  options: { path?: boolean; method?: boolean; customRoute?: string } = {},\n): [string, TransactionSource] {\n  const method = req.method && req.method.toUpperCase();\n\n  let path = '';\n  let source: TransactionSource = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  let name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n\n  return [name, source];\n}\n\ntype TransactionNamingScheme = 'path' | 'methodPath' | 'handler';\n\n/** JSDoc */\nfunction extractTransaction(req: CrossPlatformRequest, type: boolean | TransactionNamingScheme): string {\n  switch (type) {\n    case 'path': {\n      return extractPathForTransaction(req, { path: true })[0];\n    }\n    case 'handler': {\n      return (req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name) || '<anonymous>';\n    }\n    case 'methodPath':\n    default: {\n      return extractPathForTransaction(req, { path: true, method: true })[0];\n    }\n  }\n}\n\n/** JSDoc */\nfunction extractUserData(\n  user: {\n    [key: string]: any;\n  },\n  keys: boolean | string[],\n): { [key: string]: any } {\n  const extractedUser: { [key: string]: any } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */\nexport function extractRequestData(\n  req: CrossPlatformRequest,\n  options?: {\n    include?: string[];\n    deps?: InjectedNodeDeps;\n  },\n): ExtractedNodeRequestData {\n  const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  const headers = (req.headers || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa, nextjs: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  const protocol = req.protocol === 'https' || (req.socket && req.socket.encrypted) ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  const originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n  include.forEach(key => {\n    switch (key) {\n      case 'headers': {\n        requestData.headers = headers;\n        break;\n      }\n      case 'method': {\n        requestData.method = method;\n        break;\n      }\n      case 'url': {\n        requestData.url = absoluteUrl;\n        break;\n      }\n      case 'cookies': {\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || (headers.cookie && deps && deps.cookie && deps.cookie.parse(headers.cookie)) || {};\n        break;\n      }\n      case 'query_string': {\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa, nextjs: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = extractQueryParams(req, deps);\n        break;\n      }\n      case 'data': {\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   express, koa, nextjs: req.body\n        //\n        //   when using node by itself, you have to read the incoming stream(see\n        //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n        //   where they're going to store the final result, so they'll have to capture this data themselves\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      }\n      default: {\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: any })[key];\n        }\n      }\n    }\n  });\n\n  return requestData;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\nexport interface AddRequestDataToEventOptions {\n  /** Flags controlling whether each type of data should be added to the event */\n  include?: {\n    ip?: boolean;\n    request?: boolean | string[];\n    transaction?: boolean | TransactionNamingScheme;\n    user?: boolean | string[];\n  };\n\n  /** Injected platform-specific dependencies */\n  deps?: {\n    cookie: {\n      parse: (cookieStr: string) => Record<string, string>;\n    };\n    url: {\n      parse: (urlStr: string) => {\n        query: string | null;\n      };\n    };\n  };\n}\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @hidden\n */\nexport function addRequestDataToEvent(\n  event: Event,\n  req: CrossPlatformRequest,\n  options?: AddRequestDataToEventOptions,\n): Event {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...options?.include,\n  };\n\n  if (include.request) {\n    const extractedRequestData = Array.isArray(include.request)\n      ? extractRequestData(req, { include: include.request, deps: options?.deps })\n      : extractRequestData(req, { deps: options?.deps });\n\n    event.request = {\n      ...event.request,\n      ...extractedRequestData,\n    };\n  }\n\n  if (include.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...event.user,\n        ...extractedUser,\n      };\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  if (include.ip) {\n    const ip = req.ip || (req.socket && req.socket.remoteAddress);\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n\n  if (include.transaction && !event.transaction) {\n    // TODO do we even need this anymore?\n    // TODO make this work for nextjs\n    event.transaction = extractTransaction(req, include.transaction);\n  }\n\n  return event;\n}\n\nfunction extractQueryParams(\n  req: CrossPlatformRequest,\n  deps?: InjectedNodeDeps,\n): string | Record<string, unknown> | undefined {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  let originalUrl = req.originalUrl || req.url || '';\n\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = `http://dogs.are.great${originalUrl}`;\n  }\n\n  return (\n    req.query ||\n    (typeof URL !== undefined && new URL(originalUrl).search.replace('?', '')) ||\n    // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n    (deps && deps.url && deps.url.parse(originalUrl).query) ||\n    undefined\n  );\n}\n", "/* eslint-disable deprecation/deprecation */\nimport { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n", "import { getGlobalObject } from './global';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n", "import {\n  Attachment,\n  AttachmentItem,\n  DataCategory,\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => void,\n): void {\n  const envelopeItems = envelope[1];\n  envelopeItems.forEach((envelopeItem: EnvelopeItem) => {\n    const envelopeItemType = envelopeItem[0].type;\n    callback(envelopeItem, envelopeItemType);\n  });\n}\n\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item as typeof items[number];\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n    append(typeof payload === 'string' || payload instanceof Uint8Array ? payload : JSON.stringify(payload));\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n", "import { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n", "import { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n", "import { Baggage, BaggageObj, HttpHeaderValue, TraceparentData } from '@sentry/types';\n\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/** Create an instance of Baggage */\nexport function createBaggage(initItems: BaggageObj, baggageString: string = '', mutable: boolean = true): Baggage {\n  return [{ ...initItems }, baggageString, mutable];\n}\n\n/** Get a value from baggage */\nexport function getBaggageValue(baggage: Baggage, key: keyof BaggageObj): BaggageObj[keyof BaggageObj] {\n  return baggage[0][key];\n}\n\n/** Add a value to baggage */\nexport function setBaggageValue(baggage: Baggage, key: keyof BaggageObj, value: BaggageObj[keyof BaggageObj]): void {\n  if (isBaggageMutable(baggage)) {\n    baggage[0][key] = value;\n  }\n}\n\n/** Check if the Sentry part of the passed baggage (i.e. the first element in the tuple) is empty */\nexport function isSentryBaggageEmpty(baggage: Baggage): boolean {\n  return Object.keys(baggage[0]).length === 0;\n}\n\n/** Returns Sentry specific baggage values */\nexport function getSentryBaggageItems(baggage: Baggage): BaggageObj {\n  return baggage[0];\n}\n\n/**\n * Returns 3rd party baggage string of @param baggage\n * @param baggage\n */\nexport function getThirdPartyBaggage(baggage: Baggage): string {\n  return baggage[1];\n}\n\n/**\n * Checks if baggage is mutable\n * @param baggage\n * @returns true if baggage is mutable, else false\n */\nexport function isBaggageMutable(baggage: Baggage): boolean {\n  return baggage[2];\n}\n\n/**\n * Sets the passed baggage immutable\n * @param baggage\n */\nexport function setBaggageImmutable(baggage: Baggage): void {\n  baggage[2] = false;\n}\n\n/** Serialize a baggage object */\nexport function serializeBaggage(baggage: Baggage): string {\n  return Object.keys(baggage[0]).reduce((prev, key: keyof BaggageObj) => {\n    const val = baggage[0][key] as string;\n    const baggageEntry = `${SENTRY_BAGGAGE_KEY_PREFIX}${encodeURIComponent(key)}=${encodeURIComponent(val)}`;\n    const newVal = prev === '' ? baggageEntry : `${prev},${baggageEntry}`;\n    if (newVal.length > MAX_BAGGAGE_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`Not adding key: ${key} with val: ${val} to baggage due to exceeding baggage size limits.`);\n      return prev;\n    } else {\n      return newVal;\n    }\n  }, baggage[1]);\n}\n\n/**\n * Parse a baggage header from a string or a string array and return a Baggage object\n *\n * If @param includeThirdPartyEntries is set to true, third party baggage entries are added to the Baggage object\n * (This is necessary for merging potentially pre-existing baggage headers in outgoing requests with\n * our `sentry-` values)\n */\nexport function parseBaggageHeader(\n  inputBaggageValue: HttpHeaderValue,\n  includeThirdPartyEntries: boolean = false,\n): Baggage {\n  // Adding this check here because we got reports of this function failing due to the input value\n  // not being a string. This debug log might help us determine what's going on here.\n  if ((!Array.isArray(inputBaggageValue) && !isString(inputBaggageValue)) || typeof inputBaggageValue === 'number') {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        '[parseBaggageHeader] Received input value of incompatible type: ',\n        typeof inputBaggageValue,\n        inputBaggageValue,\n      );\n\n    // Gonna early-return an empty baggage object so that we don't fail later on\n    return createBaggage({}, '');\n  }\n\n  const baggageEntries = (isString(inputBaggageValue) ? inputBaggageValue : inputBaggageValue.join(','))\n    .split(',')\n    .map(entry => entry.trim())\n    .filter(entry => entry !== '' && (includeThirdPartyEntries || SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(entry)));\n\n  return baggageEntries.reduce(\n    ([baggageObj, baggageString], curr) => {\n      const [key, val] = curr.split('=');\n      if (SENTRY_BAGGAGE_KEY_PREFIX_REGEX.test(key)) {\n        const baggageKey = decodeURIComponent(key.split('-')[1]);\n        return [\n          {\n            ...baggageObj,\n            [baggageKey]: decodeURIComponent(val),\n          },\n          baggageString,\n          true,\n        ];\n      } else {\n        return [baggageObj, baggageString === '' ? curr : `${baggageString},${curr}`, true];\n      }\n    },\n    [{}, '', true],\n  );\n}\n\n/**\n * Merges the baggage header we saved from the incoming request (or meta tag) with\n * a possibly created or modified baggage header by a third party that's been added\n * to the outgoing request header.\n *\n * In case @param headerBaggageString exists, we can safely add the the 3rd party part of @param headerBaggage\n * with our @param incomingBaggage. This is possible because if we modified anything beforehand,\n * it would only affect parts of the sentry baggage (@see Baggage interface).\n *\n * @param incomingBaggage the baggage header of the incoming request that might contain sentry entries\n * @param thirdPartyBaggageHeader possibly existing baggage header string or string[] added from a third\n *        party to the request headers\n *\n * @return a merged and serialized baggage string to be propagated with the outgoing request\n */\nexport function mergeAndSerializeBaggage(incomingBaggage?: Baggage, thirdPartyBaggageHeader?: HttpHeaderValue): string {\n  if (!incomingBaggage && !thirdPartyBaggageHeader) {\n    return '';\n  }\n\n  const headerBaggage = (thirdPartyBaggageHeader && parseBaggageHeader(thirdPartyBaggageHeader, true)) || undefined;\n  const thirdPartyHeaderBaggage = headerBaggage && getThirdPartyBaggage(headerBaggage);\n\n  const finalBaggage = createBaggage((incomingBaggage && incomingBaggage[0]) || {}, thirdPartyHeaderBaggage || '');\n  return serializeBaggage(finalBaggage);\n}\n\n/**\n * Helper function that takes a raw baggage string (if available) and the processed sentry-trace header\n * data (if available), parses the baggage string and creates a Baggage object\n * If there is no baggage string, it will create an empty Baggage object.\n * In a second step, this functions determines if the created Baggage object should be set immutable\n * to prevent mutation of the Sentry data.\n *\n * Extracted this logic to a function because it's duplicated in a lot of places.\n *\n * @param rawBaggageValue\n * @param sentryTraceHeader\n */\nexport function parseBaggageSetMutability(\n  rawBaggageValue: HttpHeaderValue | false | undefined,\n  sentryTraceHeader: TraceparentData | string | false | undefined | null,\n): Baggage {\n  const baggage = parseBaggageHeader(rawBaggageValue || '');\n\n  // Because we are always creating a Baggage object by calling `parseBaggageHeader` above\n  // (either a filled one or an empty one, even if we didn't get a `baggage` header),\n  // we only need to check if we have a sentry-trace header or not. As soon as we have it,\n  // we set baggage immutable. In case we don't get a sentry-trace header, we can assume that\n  // this SDK is the head of the trace and thus we still permit mutation at this time.\n  // There is one exception though, which is that we get a baggage-header with `sentry-`\n  // items but NO sentry-trace header. In this case we also set the baggage immutable for now\n  // but if smoething like this would ever happen, we should revisit this and determine\n  // what this would actually mean for the trace (i.e. is this SDK the head?, what happened\n  // before that we don't have a sentry-trace header?, etc)\n  (sentryTraceHeader || !isSentryBaggageEmpty(baggage)) && setBaggageImmutable(baggage);\n\n  return baggage;\n}\n", "import { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. \u2014 Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n", "/* eslint-disable max-lines */\nimport {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional information about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction && this._span.transaction.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n", "/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalObject,\n  getGlobalSingleton,\n  isNodeEnv,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const global = getGlobalObject<{ navigator?: { userAgent?: string } }>();\n    const { userAgent } = global.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        updateSession(currentSession, { status: 'exited' });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope | undefined) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n", "import {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  SeverityLevel,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\nimport { getCurrentHub, Hub } from './hub';\nimport { Scope } from './scope';\n\n// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @param captureContext Additional scope data to apply to exception event.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): ReturnType<Hub['captureException']> {\n  return getCurrentHub().captureException(exception, { captureContext });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  captureContext?: CaptureContext | Severity | SeverityLevel,\n): ReturnType<Hub['captureMessage']> {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event, hint?: EventHint): ReturnType<Hub['captureEvent']> {\n  return getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): ReturnType<Hub['configureScope']> {\n  getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): ReturnType<Hub['addBreadcrumb']> {\n  getCurrentHub().addBreadcrumb(breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): ReturnType<Hub['setContext']> {\n  getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): ReturnType<Hub['setExtras']> {\n  getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): ReturnType<Hub['setExtra']> {\n  getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): ReturnType<Hub['setTags']> {\n  getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): ReturnType<Hub['setTag']> {\n  getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): ReturnType<Hub['setUser']> {\n  getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): ReturnType<Hub['withScope']> {\n  getCurrentHub().withScope(callback);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): ReturnType<Hub['startTransaction']> {\n  return getCurrentHub().startTransaction(\n    {\n      metadata: { source: 'custom' },\n      ...context,\n    },\n    customSamplingContext,\n  );\n}\n"],
  "mappings": "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",
  "names": ["global", "global", "global", "logger", "global", "global", "global", "handlers", "global", "isNaN", "States", "resolve", "resolve", "resolve", "global"]
}
